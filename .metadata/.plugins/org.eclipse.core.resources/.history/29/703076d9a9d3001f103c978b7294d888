package SW_1;

import java.awt.EventQueue;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;

import javax.swing.JFrame;
import javax.swing.JTable;
import java.awt.BorderLayout;
import javax.swing.JPanel;
import javax.swing.JButton;
import javax.swing.JTextField;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

import javax.swing.table.DefaultTableModel;
import javax.swing.JTextPane;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.*;
import java.awt.Color;

public class FoodTable {

	private JFrame frame;
	private JTable table;
	private JTextField textFilter;
	public static String[][] Data_1 = new String[20][5];
	public static String[] Col_Name = new String[5];
	public static int ROWS = 0;
	private JTextPane textPane;
	private JButton btnNewButton_1;


		//method that controls events in the AWT dispatcher thread 


	// Create the application.
	 
	public FoodTable() {
		start();
		readFile();
	}

	// Creating the GUI.
	public void start() {
		frame = new JFrame();
		frame.setBounds(100, 100, 600, 500);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		DefaultTableModel model = new DefaultTableModel(Data_1, Col_Name); //
		table = new JTable(model);

		frame.getContentPane().add(table, BorderLayout.CENTER);
		
		JPanel panel = new JPanel();
		frame.getContentPane().add(panel, BorderLayout.SOUTH);
		
		textFilter = new JTextField();
		panel.add(textFilter);
		textFilter.setColumns(10);
		
		JButton btnNewButton = new JButton("Filter");
		
		//function that filters text when the 'filter' button is pressed
		btnNewButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				String B = textFilter.getText().toLowerCase();
				
				System.out.println(" --> Search: " + B);
				
				String[][] DATA_Search = new String[ROWS][5];
				int CCC = 0;
				if (textFilter.getText().toLowerCase().equals("all"))
				{
					DATA_Search = Data_1;
					CCC = 2;
				}
				else
				{
					for (int i=0; i<Data_1.length; i++)
					{
						for (int j=0; j<5; j++)
						{
							String A = Data_1[i][j].toLowerCase();
							
							boolean Result_Search = A.equals(B);
							//System.out.println(" --> Found: " + A + " : " + Result_Search);
							
							if (Result_Search)
							{
								
								DATA_Search[i] = Data_1[i];
								CCC = 1;
								break;
							}
						}
					}
				}
				//changing the pane to tell the user if filtering succeeded, or if it's showing every item
				if (CCC == 2)
				{
					textPane.setBackground(new Color(125, 249, 255));
					textPane.setText("ALL");
				}
				else if (CCC == 1)
				{
					textPane.setBackground(new Color(0, 255, 0));
					textPane.setText("FOUND");
				}
				else
				{
					textPane.setBackground(new Color(248, 131, 121));
					textPane.setText("Not Found");
				}
				
				for (int row=0; row<DATA_Search.length; row++)
				{
					if (row == 0)
					{
						for (int col=0; col<5; col++)
						{
							model.setValueAt(Col_Name[col], 0, col);
						}
					}
					else
					{
						for (int col=0; col<5; col++)
						{
							model.setValueAt(DATA_Search[row][col], row, col);
						}
					}
				}
				
				DefaultTableModel tableModel = (DefaultTableModel) table.getModel();
				tableModel.setRowCount(DATA_Search.length);
				tableModel.fireTableDataChanged();
			}
		});
		panel.add(btnNewButton);
		
		btnNewButton_1 = new JButton("Home");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				new HomePage();
				frame.setVisible(false);
			}
		});
		panel.add(btnNewButton_1);
		
		
		textPane = new JTextPane();
		textPane.setEditable(false);
		textPane.setBackground(new Color(255, 255, 128));
		frame.getContentPane().add(textPane, BorderLayout.NORTH);
		
		StyledDocument doc = textPane.getStyledDocument();
		
		SimpleAttributeSet center = new SimpleAttributeSet();
		StyleConstants.setAlignment(center, StyleConstants.ALIGN_CENTER);
		StyleConstants.setForeground(center, Color.black);
		
		doc.setParagraphAttributes(0, doc.getLength(), center, false);


	}
	//sorting the food list in descending alphabetical order
	public static String[][] arrangeArray(String[][] array, int col, boolean hasHeaders) 
	{
	//headers makes the program ignore the header when sorting 
     int headers = 0;
     if (hasHeaders) 
     {
         headers = 1;
     }
     for (int i = headers; i < array.length; i++) 
     {
         for (int j = headers; j < array.length; j++) 
         {
         	if (array[i][col].compareTo(array[j][col]) < 0)
         	{
             String[] temp = array[i];
             array[i] = array[j];
             array[j] = temp;
         	}
         }
     }
     return array;
	}
	public void readFile() {
		try {
			File csvFile = new File("C:\\Users\\us\\eclipse-workspace\\FoodApp\\RecipeBook.csv");
			BufferedReader br = new BufferedReader(new FileReader(csvFile)); 
			try {
				while ((br.readLine()) != null) 
				{
					ROWS++;
				} 
			}
			catch (FileNotFoundException e)
			{
				e.printStackTrace();
			}
			
			BufferedReader Br = new BufferedReader(new FileReader(csvFile));
			
			String[] H_DATA = new String[5];
			String[][] DATA = new String[ROWS-1][5];
			int CC = 0;
			String Line = "";
			try {
				while ((Line = Br.readLine()) != null) 
				{
					if (CC != 0)
					{
						String[] count = Line.split(",");
						DATA[CC-1] = count;
					}
					else
					{
						String[] count = Line.split(",");
						H_DATA = count;
					}
					CC++;
				} 
			}
			catch (FileNotFoundException e)
			{
				e.printStackTrace();
			}
			
			arrangeArray(DATA, 0, false); //sort from column 0
			String[][] DATA_Buf = new String[ROWS][5];
			DATA_Buf[0] = H_DATA;
			for (int i=0; i<DATA.length; i++)
			{
				DATA_Buf[i+1] = DATA[i];
			}
			
			
			Data_1 = DATA_Buf;
			Col_Name = H_DATA;
			
			for (int j=0; j<5; j++)
			{
				System.out.print(Col_Name[j] + " : ");
			}
			System.out.println();
			
			for (int i=0; i<Data_1.length; i++)
			{
				for (int j=0; j<5; j++)
				{
					System.out.print(Data_1[i][j] + " : ");
				}
				System.out.println();
			}
			
			
			
			
			
			FoodTable window = new FoodTable();
			window.frame.setVisible(true);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
